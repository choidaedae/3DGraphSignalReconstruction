# -*- coding: utf-8 -*-
"""20210716_q1_code.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gwzH6_Et5Gr94nHmrhhtLStGvPwQuttg
"""

# import libraries

import scipy.io
import numpy as np
import itertools
from scipy.sparse.csgraph import laplacian
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

# load files

mat = scipy.io.loadmat('A.mat')
y_100 = scipy.io.loadmat('y_100.mat')
y_500 = scipy.io.loadmat('y_500.mat')
y_1000 =scipy.io.loadmat('y_1000.mat')

# transform .mat to np.array 

def mattoA(mat):
    A = np.float64(mat['A'])
    return A

def ytow(y):
    w1 = y['w1']
    w2 = y['w2']
    w3 = y['w3']
    return w1, w2, w3

def ytoy(y):
    y1 = y['y1']
    y2 = y['y2']
    y3 = y['y3']
    return y1, y2, y3

# 1. Construct Degree Matrix & Graph Laplacian 

def AtoL(A, N):
    D = np.zeros((N, N))
    D = np.diag(np.sum(A, axis=1))
    # if you want to normalize L, using d = D^-1/2
    #d = np.zeros((N, N))
    #d = np.sqrt(D)
    #d = np.linalg.inv(d) 
    L = D - A 
    #L= d@L@d #normalize
    return L

# 2. set hyperparameters

gamma = 0.1 # You can change this part with 10 
N = 3400

# 3. implement functions

def sampling_matrix(w, N):
    M = np.zeros((len(w), N))
    for i, w_i in enumerate(w): M[i, w_i-1] = 1
    return M

def recovery(y, gamma, M, L):
    g = np.linalg.inv(np.transpose(M)@M + gamma*L)@np.transpose(M)@y
    return g

# 4. function call

A = mattoA(mat)
L = AtoL(A, N)
w1, w2, w3 = ytow(y_1000) # You can change this part with y_100 or y_500
y1, y2, y3 = ytoy(y_1000) # You can change this part with y_100 or y_50
M1 = sampling_matrix(w1, N)
M2 = sampling_matrix(w2, N)
M3 = sampling_matrix(w3, N)
gx = recovery(y1, gamma, M1, L)
gy = recovery(y2, gamma, M2, L)
gz = recovery(y3, gamma, M3, L)

# 5. 3D Scatter plot

fig = plt.figure()
recovered = fig.add_subplot(111, projection='3d')
recovered.scatter(gx, gy, gz)
recovered.view_init(30, 0)
plt.title('Recovered Signal - gamma = 0.1 / m = 1000')
plt.show()
